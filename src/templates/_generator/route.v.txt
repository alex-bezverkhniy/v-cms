module main

import json

import vweb


// ${type_definition.title} API //////////////////////////////////////////

['/api/count/${type_list_name}'; get]
pub fn (mut app App) ${type_list_name}_count() vweb.Result {
	count := app.get_${type_list_name}_count() or { 0 }

	return app.json(count)
}

['/api/${type_list_name}/'; post]
pub fn (mut app App) create_${type_name_lo}() vweb.Result {	
	o := json.decode(${type_name}, app.req.data) or {
		return app.response_with_error('Failed to decode json, error: $err_var', 400, err)
	}
	
	res := app.create_new_${type_name_lo}(o) or { 
		return app.response_with_error('Cannot create new ${type_name}', 503, err)
	}

	return app.json(res)
}

['/api/${type_list_name}/:${type_name_lo}_id'; get]
pub fn (mut app App) ${type_name_lo}_by_id(${type_name_lo}_id int ) vweb.Result {	
	res := app.get_${type_name_lo}_by_id(${type_name_lo}_id) or { $type_name{} }
	if res.id == 0 {
		return app.response_with_error('$type_name not found', 404, error("$type_name not found"))
	}
	return app.json(res)
}


['/api/${type_list_name}/:${type_name_lo}_id'; put]
pub fn (mut app App) update_${type_name_lo}(${type_name_lo}_id int) vweb.Result {	
	old_obl :=app.get_${type_name_lo}_by_id(${type_name_lo}_id) or {
		return app.response_with_error('${type_name} not found', 404, err)
	}

	if old_obl.id == 0 {
		return app.response_with_error('${type_name} not found', 404, error("${type_name} not found"))
	}

	o := json.decode(${type_name}, app.req.data) or {
		return app.response_with_error('Failed to decode json, error: $err_var', 400, err)
	}
	
	res := app.update_${type_name_lo}_by_id(${type_name_lo}_id, o) or { 
		return app.response_with_error('Cannot create new ${type_name}', 503, err)
	}

	return app.json(res)
}
