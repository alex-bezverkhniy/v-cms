module main

import json

import vweb


// ${type_definition.title} API //////////////////////////////////////////

['/api/count/${type_list_name}'; get]
pub fn (mut app App) ${type_list_name}_count() vweb.Result {
	count := app.get_${type_list_name}_count() or { 0 }

	return app.json(count)
}

['/api/${type_list_name}/'; post]
pub fn (mut app App) create_${type_name_lo}() vweb.Result {	
	o := json.decode(${type_name}, app.req.data) or {
		return app.response_with_error('Failed to decode json, error: $err_var', 400, err)
	}
	
	res := app.create_new_${type_name_lo}(o) or { 
		return app.response_with_error('Cannot create new ${type_name}', 503, err)
	}

	return app.json(res)
}

['/api/${type_list_name}/:${type_name_lo}_id'; get]
pub fn (mut app App) ${type_name_lo}_by_id(${type_name_lo}_id int ) vweb.Result {	
	res := app.get_${type_name_lo}_by_id(${type_name_lo}_id) or { $type_name{} }
	if res.id == 0 {
		return app.response_with_error('$type_name not found', 404, error("$type_name not found"))
	}
	return app.json(res)
}


['/api/${type_list_name}/:${type_name_lo}_id'; put]
pub fn (mut app App) update_${type_name_lo}(${type_name_lo}_id int) vweb.Result {	
	old_obl :=app.get_${type_name_lo}_by_id(${type_name_lo}_id) or {
		return app.response_with_error('${type_name} not found', 404, err)
	}

	if old_obl.id == 0 {
		return app.response_with_error('${type_name} not found', 404, error("${type_name} not found"))
	}

	o := json.decode(${type_name}, app.req.data) or {
		return app.response_with_error('Failed to decode json, error: $err_var', 400, err)
	}
	
	res := app.update_${type_name_lo}_by_id(${type_name_lo}_id, o) or { 
		return app.response_with_error('Cannot create new ${type_name}', 503, err)
	}

	return app.json(res)
}


['/api/${type_list_name}/'; get]
pub fn (mut app App) all_${type_list_name}() vweb.Result {		
	
	res := app.get_all_${type_list_name}_query(
		app.query['order_by'], 
		app.query['order_type'],
		app.query['filter_by'],
		app.query['filter_by_op'],
		app.query['filter_by_val'],
		app.query['page_size'].int(),
		app.query['page_num'].int(),
	) or { []${type_name}{} }

	return app.json(res)
}


// ${type_definition.title} Pages ////////////////////////////////////////


['/admin/${type_list_name}'; get]
pub fn (mut app App) admin_${type_list_name}() vweb.Result {
	items_list := app.get_all_${type_list_name}_query(
		app.query['order_by'], 
		app.query['order_type'],
		app.query['filter_by'],
		app.query['filter_by_op'],
		app.query['filter_by_val'],
		app.query['page_size'].int(),
		app.query['page_num'].int(),
	) or {[]${type_name} {}} 

	item_id := app.query['item_id']
	mut edit_item := ${type_name}  {}
	is_edit_item := item_id != ""

	if is_edit_item {
		id := item_id.int()
		edit_item = app.get_${type_name_lo}_by_id(id) or {${type_name} {}} 		
	}
	order_by := app.query['order_by']
	order_type := if app.query['order_type'] == "asc" {"desc"} else {"asc"}
	filter_by := app.query['filter_by']
	filter_by_op := app.query['filter_by_op']
	filter_by_val := app.query['filter_by_val']
	page_size := if app.query['page_size'].int() == 0 {default_page_size} else {app.query['page_size'].int()}
	page_num := if app.query['page_num'].int() == 0 {1} else {app.query['page_num'].int()}
	total_rows := app.get_${type_list_name}_count() or {0}

    return ${vweb_plsh}.html()
}
