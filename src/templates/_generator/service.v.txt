module main
import time

const (
	columns_${type_name_lo}_list = @fields_list
)

pub fn (mut app App) get_${type_list_name}_count() ?int {
	res := sql app.db {
		select count from $type_name
	}

	return res
}

pub fn (mut app App) create_new_${type_name_lo}(o $type_name) ?$type_name {	

	new_obj := ${type_name} {
    	...o
		created_at: time.now()
		updated_at:	time.now()
	}

	sql app.db {
		insert new_obj into ${type_name}
	} 
	
    res := sql app.db {
		select from ${type_name} where ${unique_field} == ${unique_col} limit 1
	} or {
		return error('Cannot create new ${type_name}: $err_var')
	}

	return res
}

pub fn (mut app App) get_${type_name_lo}_by_id(id int) ?$type_name {
	res := sql app.db {
		select from $type_name where id == id limit 1
	} or { $type_name{} }

	return res
}


pub fn (mut app App) update_${type_name_lo}_by_id(id int, o ${type_name}) ?${type_name} {	
	old_o := app.get_${type_name_lo}_by_id(id) or {
		return error('Cannot update ${type_name}: $err_var')
	}

	if old_o.id == 0 {
		return error('${type_name} not found')
	}
	
	new_o := ${type_name} {
        ...o
		id: id		
        updated_at:	time.now()				
	}

	sql app.db {
		update ${type_name} set 
            @for i1, f in fields_list
            $f = ${update_fields_list[i1]},
            @end
            updated_at = new_o.updated_at, 
            is_blocked = new_o.is_blocked
        where id == id
	} 

	res := sql app.db {
		select from ${type_name} where ${unique_field} == ${unique_col} limit 1
	} or {
		return error('Cannot update ${type_name}: $err_var')
	}

	return res
}


pub fn (mut app App) get_all_${type_list_name}_query(
	order_by string, order_type string,
	filter_by string, filter_by_op string, filter_by_val string,
	page_size int, page_num int
) ?[]${type_name} {	
	
	order_types_list := ['asc', 'desc']

	// Protect from sql injections - 
	o_by := if order_by == "" || order_by !in columns_list { "id" } else { order_by }
	o_type := if order_type == "" || order_type !in order_types_list {"desc"} else {order_type}
	f_by := if filter_by !in columns_list { "" } else { filter_by }
	f_by_op := if filter_by_op !in operations.keys() { "" } else { filter_by_op }
	f_by_val := if check_has_sql_injections(filter_by_val) { "" } else { filter_by_val }

	mut where := ""
	if f_by != "" && f_by_op != "" {
		where = 'where ' + f_by + ' ' + operations[f_by_op] + ' ' + f_by_val
	}

	mut pagination := ""
	if page_size > 0 && page_num > 0 {
		pagination = 'limit ${page_size_plsh} offset ${page_num_plsh}'
	}

	query := 'select id, created_at, updated_at, is_blocked, author_id, ${fields_list_str} from `${type_name}`' + where + ' order by ' + o_by + ' ' + o_type + ' ' + pagination

	rows, _ := app.db.exec(query)

	mut res := []${type_name}{}

	for row in rows {
		vals := row.vals

		id := vals[0].int()
		created_at := time.unix(vals[1].int())
		updated_at := time.unix(vals[2].int())
		is_blocked := vals[3] == '1'
		author_id := vals[4].int()
        @for idx, col in fields_list 
            $col := ${vals_list[idx]}    
        @end
		o := ${type_name}{
			id: id
			created_at: created_at
			updated_at: updated_at
			is_blocked: is_blocked
            author_id: author_id
        @for _, col in fields_list 
            $col: $col
        @end
		}

		res << o
	}

	return res
}